@compiler >= 4

include "List.aes"
include "Option.aes"

contract WaelletTipAny =

  record state = 
    { tips          : map(string, map(int, tip))
    , oracle_service: oracle(string, string) }

  record tip = 
    { sender        : address
    , received_at   : int
    , repaid        : bool
    , amount        : int
    , note          : option(string)
    , queries       : map(int, oracle_query(string, string)) }

  datatype event = 
    TipReceived(address, int, string) 

  entrypoint init (oracle_service' : oracle(string, string)) : state =
    { tips = {}, oracle_service  = oracle_service' }

  payable stateful entrypoint tip (url': string, note: option(string)) : unit =
    put(state{ tips[url'][Map.size(state.tips[url'])] = new_tip(url', note) })
    Chain.event(TipReceived(Call.caller, Call.value, url'))

  stateful entrypoint withdraw (url' : string) : unit =
    Chain.spend(Call.caller, 0)

  // PRIVATE FUNCTIONS AND MODIFIERS

  stateful function new_tip(url' : string, note: option(string)) : tip =
    { sender        = Call.caller,
      received_at   = Chain.timestamp,
      repaid        = false,
      amount        = Call.value,
      note          = note,
      queries       = { [0] = oracle_query_tip_url(url') } }


  stateful function oracle_query_tip_url(url': string) : oracle_query(string, string) =
    Oracle.query( state.oracle_service
      , url'
      , 30000
      , RelativeTTL(200)
      , RelativeTTL(200) )
