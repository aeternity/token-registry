contract WaelletTip =
  record state = {
    websites: map(string, website) }

  record website = {
    domain: string,
    challenge: string,
    date_expire: int,
    owner: map(address, timeframe),
    balance: int,
    tips: list(tip) }

  record tip = {
    repaid: bool,
    sender: address,
    date_received: int,
    amount: int }

  record timeframe = {
    date_from: int,
    date_to: int }

  public stateful function init() = 
    { websites = {} }

  public stateful function tip(domain: string) =
    is_website_present(domain)
    let tip : tip = {
      sender = Call.caller,
      date_received = Chain.timestamp,
      amount = Call.value }

    put(state{websites[domain].tips = tip :: state.websites[domain].tips})
    put(state{websites[domain].balance = Call.value + state.websites[domain].balance})

  public function balance(domain:string) : int =
    state.websites[domain].balance

  public stateful function claim(domain: string) : string =
    is_domain_expired(domain)
    challenge_generate(domain)

  public stateful function withdraw(domain: string) =
    is_domain_owner(domain)
    is_enough_balance(domain)
    let withdraw_amount = state.websites[domain].balance
    put(state{websites[domain].balance = 0})
    Chain.spend(Call.caller, withdraw_amount)

  private stateful function challenge_generate(domain: string) : string =
    let challenge =  Int.to_str(String.sha3(domain))
    put(state{websites[domain].challenge = challenge})
    challenge

  private function challenge_check(domain: string) : bool =
    // Call oracle and verify challenge
    true

  private function is_domain_owner(domain: string) =
    require(state.websites[domain].owner[Call.caller].date_to != 0, "You are not the owner of this domain")
    require(state.websites[domain].owner[Call.caller].date_from =< Chain.timestamp, "You are not the owner of this domain")
    require(state.websites[domain].owner[Call.caller].date_to >= Chain.timestamp, "You are not the owner of this domain")

  private function is_enough_balance(domain: string) =
    require(state.websites[domain].balance > 0, "Not enough balance")

  public function all_domain_expire_dates(domain) : list(int) =
    let domain_expires_list = Map.to_list(state.websites[domain].owner)
    map(tuple_second, domain_expires_list)

  private function is_domain_expired(domain: string) : bool =
    is_domain_expired'(all_domain_expire_dates(domain))

  private function is_domain_expired'(domain_expires_list: list(int)) : bool =
    switch(domain_expires_list)
      [] => true
      e :: l' =>
        if(e =< Chain.timestamp)
          false
        else
          is_domain_expired'(l')

  private stateful function is_website_present(domain: string) =
    if(!Map.member(domain, state.websites))
      let website : website = {
        domain = domain,
        challenge = challenge_generate(domain),
        date_expire = 0,
        owner = {},
        balance = 0, 
        tips = [] }
      put(state{websites[domain] = website})

  private function tuple_second(tuple) =
    switch(tuple)
      (_, e) => e.date_to

  // general helper functions //

  private function sum(f : 'a => int, l : list('a)) : int =
    foldr((x, y) => x + y, 0, map(f, l))

  private function map(f : 'a => 'b, l : list('a)) : list('b) =
    switch(l)
     [] => []
     e :: l' => f(e) :: map(f, l')

  private function foldr(f : (('a, 'b) => 'b), z: 'b, l : list('a)) : 'b =
    switch(l)
      [] => z
      e :: l' => f(e, foldr(f, z, l'))

  private function insert_by(f: (('a, 'a) => bool), x : 'a, l : list('a)) : list('a) =
    switch(l)
      [] => [x]
      (e :: l') =>
        if(f(x, e))
          e :: insert_by(f, x, l')
        else
          x :: l

  function filter(f : ('a) => bool, l : list('a)) = filter'(f, l, [])
  private function filter'(f : ('a) => bool, l : list('a), acc : list('a)) =
    switch(l)
      [] => acc
      e :: l' =>
        if(f(e))
          filter'(f, l', e :: acc)
        else
          filter'(f, l', acc)


  private function is_greater_zero(x : int) : bool = x > 0

  private function require(b : bool, err : string) =
    if(!b) abort(err)